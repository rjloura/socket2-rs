var N=null,E="",T="t",U="u",searchIndex={};
var R=["socketaddrv4","option","socketaddrv6","socklen_t","protocol","socket","sockaddr","result","Initiate a connection on this socket to the specified…","shutdown","duration","ipv4addr","ipv6addr","try_from","try_into","borrow_mut","type_id","to_owned","clone_into","borrow","typeid","tcpstream","tcplistener","udpsocket","domain","formatter","SockAddr","Protocol"];

searchIndex["socket2"]={"doc":"Utilities for handling sockets","i":[[3,"Socket","socket2","Newtype, owned, wrapper around a system socket.",N,N],[3,R[26],E,"The address of a socket.",N,N],[3,"Domain",E,"Specification of the communication domain for a socket.",N,N],[3,"Type",E,"Specification of communication semantics on a socket.",N,N],[3,R[27],E,"Protocol specification used for creating sockets via…",N,N],[11,"from_raw_parts",E,"Constructs a `SockAddr` from its raw components.",0,[[[R[3]]],[R[6]]]],[11,"as_inet",E,"Returns this address as a `SocketAddrV4` if it is in the…",0,[[["self"]],[[R[1],[R[0]]],[R[0]]]]],[11,"as_inet6",E,"Returns this address as a `SocketAddrV6` if it is in the…",0,[[["self"]],[[R[2]],[R[1],[R[2]]]]]],[11,"family",E,"Returns this address's family.",0,[[["self"]],["sa_family_t"]]],[11,"len",E,"Returns the size of this address in bytes.",0,[[["self"]],[R[3]]]],[11,"as_ptr",E,"Returns a raw pointer to the address.",0,[[["self"]]]],[11,"new",E,"Creates a new socket ready to be configured.",1,[[["type"],[R[24]],[R[4]],[R[1],[R[4]]]],[[R[5]],[R[7],[R[5]]]]]],[11,"into_tcp_stream",E,"Consumes this `Socket`, converting it to a `TcpStream`.",1,[[],[R[21]]]],[11,"into_tcp_listener",E,"Consumes this `Socket`, converting it to a `TcpListener`.",1,[[],[R[22]]]],[11,"into_udp_socket",E,"Consumes this `Socket`, converting it to a `UdpSocket`.",1,[[],[R[23]]]],[11,"connect",E,R[8],1,[[["self"],[R[6]]],[R[7]]]],[11,"connect_timeout",E,R[8],1,[[["self"],[R[6]],[R[10]]],[R[7]]]],[11,"bind",E,"Binds this socket to the specified address.",1,[[["self"],[R[6]]],[R[7]]]],[11,"listen",E,"Mark a socket as ready to accept incoming connection…",1,[[["self"],["i32"]],[R[7]]]],[11,"accept",E,"Accept a new incoming connection from this listener.",1,[[["self"]],[R[7]]]],[11,"local_addr",E,"Returns the socket address of the local half of this TCP…",1,[[["self"]],[[R[7],[R[6]]],[R[6]]]]],[11,"peer_addr",E,"Returns the socket address of the remote peer of this TCP…",1,[[["self"]],[[R[7],[R[6]]],[R[6]]]]],[11,"try_clone",E,"Creates a new independently owned handle to the underlying…",1,[[["self"]],[[R[5]],[R[7],[R[5]]]]]],[11,"take_error",E,"Get the value of the `SO_ERROR` option on this socket.",1,[[["self"]],[[R[7],[R[1]]],[R[1],["error"]]]]],[11,"set_nonblocking",E,"Moves this TCP stream into or out of nonblocking mode.",1,[[["self"],["bool"]],[R[7]]]],[11,R[9],E,"Shuts down the read, write, or both halves of this…",1,[[["self"],[R[9]]],[R[7]]]],[11,"recv",E,"Receives data on the socket from the remote address to…",1,[[["self"]],[["usize"],[R[7],["usize"]]]]],[11,"peek",E,"Receives data on the socket from the remote adress to…",1,[[["self"]],[["usize"],[R[7],["usize"]]]]],[11,"recv_from",E,"Receives data from the socket. On success, returns the…",1,[[["self"]],[R[7]]]],[11,"peek_from",E,"Receives data from the socket, without removing it from…",1,[[["self"]],[R[7]]]],[11,"send",E,"Sends data on the socket to a connected peer.",1,[[["self"]],[["usize"],[R[7],["usize"]]]]],[11,"send_to",E,"Sends data on the socket to the given address. On success,…",1,[[["self"],[R[6]]],[["usize"],[R[7],["usize"]]]]],[11,"ttl",E,"Gets the value of the `IP_TTL` option for this socket.",1,[[["self"]],[["u32"],[R[7],["u32"]]]]],[11,"set_ttl",E,"Sets the value for the `IP_TTL` option on this socket.",1,[[["self"],["u32"]],[R[7]]]],[11,"unicast_hops_v6",E,"Gets the value of the `IPV6_UNICAST_HOPS` option for this…",1,[[["self"]],[["u32"],[R[7],["u32"]]]]],[11,"set_unicast_hops_v6",E,"Sets the value for the `IPV6_UNICAST_HOPS` option on this…",1,[[["self"],["u32"]],[R[7]]]],[11,"only_v6",E,"Gets the value of the `IPV6_V6ONLY` option for this socket.",1,[[["self"]],[[R[7],["bool"]],["bool"]]]],[11,"set_only_v6",E,"Sets the value for the `IPV6_V6ONLY` option on this socket.",1,[[["self"],["bool"]],[R[7]]]],[11,"read_timeout",E,"Returns the read timeout of this socket.",1,[[["self"]],[[R[1],[R[10]]],[R[7],[R[1]]]]]],[11,"set_read_timeout",E,"Sets the read timeout to the timeout specified.",1,[[[R[1],[R[10]]],["self"],[R[10]]],[R[7]]]],[11,"write_timeout",E,"Returns the write timeout of this socket.",1,[[["self"]],[[R[1],[R[10]]],[R[7],[R[1]]]]]],[11,"set_write_timeout",E,"Sets the write timeout to the timeout specified.",1,[[[R[1],[R[10]]],["self"],[R[10]]],[R[7]]]],[11,"nodelay",E,"Gets the value of the `TCP_NODELAY` option on this socket.",1,[[["self"]],[[R[7],["bool"]],["bool"]]]],[11,"set_nodelay",E,"Sets the value of the `TCP_NODELAY` option on this socket.",1,[[["self"],["bool"]],[R[7]]]],[11,"broadcast",E,"Sets the value of the `SO_BROADCAST` option for this socket.",1,[[["self"]],[[R[7],["bool"]],["bool"]]]],[11,"set_broadcast",E,"Gets the value of the `SO_BROADCAST` option for this socket.",1,[[["self"],["bool"]],[R[7]]]],[11,"multicast_loop_v4",E,"Gets the value of the `IP_MULTICAST_LOOP` option for this…",1,[[["self"]],[[R[7],["bool"]],["bool"]]]],[11,"set_multicast_loop_v4",E,"Sets the value of the `IP_MULTICAST_LOOP` option for this…",1,[[["self"],["bool"]],[R[7]]]],[11,"multicast_ttl_v4",E,"Gets the value of the `IP_MULTICAST_TTL` option for this…",1,[[["self"]],[["u32"],[R[7],["u32"]]]]],[11,"set_multicast_ttl_v4",E,"Sets the value of the `IP_MULTICAST_TTL` option for this…",1,[[["self"],["u32"]],[R[7]]]],[11,"multicast_hops_v6",E,"Gets the value of the `IPV6_MULTICAST_HOPS` option for…",1,[[["self"]],[["u32"],[R[7],["u32"]]]]],[11,"set_multicast_hops_v6",E,"Sets the value of the `IPV6_MULTICAST_HOPS` option for…",1,[[["self"],["u32"]],[R[7]]]],[11,"multicast_if_v4",E,"Gets the value of the `IP_MULTICAST_IF` option for this…",1,[[["self"]],[[R[11]],[R[7],[R[11]]]]]],[11,"set_multicast_if_v4",E,"Sets the value of the `IP_MULTICAST_IF` option for this…",1,[[[R[11]],["self"]],[R[7]]]],[11,"multicast_if_v6",E,"Gets the value of the `IPV6_MULTICAST_IF` option for this…",1,[[["self"]],[["u32"],[R[7],["u32"]]]]],[11,"set_multicast_if_v6",E,"Sets the value of the `IPV6_MULTICAST_IF` option for this…",1,[[["self"],["u32"]],[R[7]]]],[11,"multicast_loop_v6",E,"Gets the value of the `IPV6_MULTICAST_LOOP` option for…",1,[[["self"]],[[R[7],["bool"]],["bool"]]]],[11,"set_multicast_loop_v6",E,"Sets the value of the `IPV6_MULTICAST_LOOP` option for…",1,[[["self"],["bool"]],[R[7]]]],[11,"join_multicast_v4",E,"Executes an operation of the `IP_ADD_MEMBERSHIP` type.",1,[[[R[11]],["self"]],[R[7]]]],[11,"join_multicast_v6",E,"Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",1,[[["self"],[R[12]],["u32"]],[R[7]]]],[11,"leave_multicast_v4",E,"Executes an operation of the `IP_DROP_MEMBERSHIP` type.",1,[[[R[11]],["self"]],[R[7]]]],[11,"leave_multicast_v6",E,"Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",1,[[["self"],[R[12]],["u32"]],[R[7]]]],[11,"linger",E,"Reads the linger duration for this socket by getting the…",1,[[["self"]],[[R[1],[R[10]]],[R[7],[R[1]]]]]],[11,"set_linger",E,"Sets the linger duration of this socket by setting the…",1,[[[R[1],[R[10]]],["self"],[R[10]]],[R[7]]]],[11,"reuse_address",E,"Check the `SO_REUSEADDR` option on this socket.",1,[[["self"]],[[R[7],["bool"]],["bool"]]]],[11,"set_reuse_address",E,"Set value for the `SO_REUSEADDR` option on this socket.",1,[[["self"],["bool"]],[R[7]]]],[11,"recv_buffer_size",E,"Gets the value of the `SO_RCVBUF` option on this socket.",1,[[["self"]],[["usize"],[R[7],["usize"]]]]],[11,"set_recv_buffer_size",E,"Sets the value of the `SO_RCVBUF` option on this socket.",1,[[["self"],["usize"]],[R[7]]]],[11,"send_buffer_size",E,"Gets the value of the `SO_SNDBUF` option on this socket.",1,[[["self"]],[["usize"],[R[7],["usize"]]]]],[11,"set_send_buffer_size",E,"Sets the value of the `SO_SNDBUF` option on this socket.",1,[[["self"],["usize"]],[R[7]]]],[11,"keepalive",E,"Returns whether keepalive messages are enabled on this…",1,[[["self"]],[[R[1],[R[10]]],[R[7],[R[1]]]]]],[11,"set_keepalive",E,"Sets whether keepalive messages are enabled to be sent on…",1,[[[R[1],[R[10]]],["self"],[R[10]]],[R[7]]]],[11,"ipv4",E,"Domain for IPv4 communication, corresponding to `AF_INET`.",2,[[],[R[24]]]],[11,"ipv6",E,"Domain for IPv6 communication, corresponding to `AF_INET6`.",2,[[],[R[24]]]],[11,"stream",E,"Type corresponding to `SOCK_STREAM`",3,[[],["type"]]],[11,"dgram",E,"Type corresponding to `SOCK_DGRAM`",3,[[],["type"]]],[11,"seqpacket",E,"Type corresponding to `SOCK_SEQPACKET`",3,[[],["type"]]],[11,"raw",E,"Type corresponding to `SOCK_RAW`",3,[[],["type"]]],[11,"icmpv4",E,"Protocol corresponding to `ICMPv4`",4,[[],["self"]]],[11,"icmpv6",E,"Protocol corresponding to `ICMPv6`",4,[[],["self"]]],[11,"tcp",E,"Protocol corresponding to `TCP`",4,[[],["self"]]],[11,"udp",E,"Protocol corresponding to `UDP`",4,[[],["self"]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[13],E,E,1,[[[U]],[R[7]]]],[11,R[14],E,E,1,[[],[R[7]]]],[11,R[19],E,E,1,[[["self"]],[T]]],[11,R[15],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[20]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[13],E,E,0,[[[U]],[R[7]]]],[11,R[14],E,E,0,[[],[R[7]]]],[11,R[19],E,E,0,[[["self"]],[T]]],[11,R[15],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[20]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[18],E,E,2,[[[T],["self"]]]],[11,R[13],E,E,2,[[[U]],[R[7]]]],[11,R[14],E,E,2,[[],[R[7]]]],[11,R[19],E,E,2,[[["self"]],[T]]],[11,R[15],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[20]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[17],E,E,3,[[["self"]],[T]]],[11,R[18],E,E,3,[[[T],["self"]]]],[11,R[13],E,E,3,[[[U]],[R[7]]]],[11,R[14],E,E,3,[[],[R[7]]]],[11,R[19],E,E,3,[[["self"]],[T]]],[11,R[15],E,E,3,[[["self"]],[T]]],[11,R[16],E,E,3,[[["self"]],[R[20]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[17],E,E,4,[[["self"]],[T]]],[11,R[18],E,E,4,[[[T],["self"]]]],[11,R[13],E,E,4,[[[U]],[R[7]]]],[11,R[14],E,E,4,[[],[R[7]]]],[11,R[19],E,E,4,[[["self"]],[T]]],[11,R[15],E,E,4,[[["self"]],[T]]],[11,R[16],E,E,4,[[["self"]],[R[20]]]],[11,"from",E,E,0,[[[R[0]]],[R[6]]]],[11,"from",E,E,0,[[[R[2]]],[R[6]]]],[11,"from",E,E,0,[[["socketaddr"]],[R[6]]]],[11,"from",E,E,1,[[[R[21]]],[R[5]]]],[11,"from",E,E,1,[[[R[22]]],[R[5]]]],[11,"from",E,E,1,[[[R[23]]],[R[5]]]],[11,"from",E,E,2,[[["i32"]],[R[24]]]],[11,"from",E,E,3,[[["i32"]],["type"]]],[11,"from",E,E,4,[[["i32"]],[R[4]]]],[11,"clone",E,E,2,[[["self"]],[R[24]]]],[11,"clone",E,E,3,[[["self"]],["type"]]],[11,"clone",E,E,4,[[["self"]],[R[4]]]],[11,"fmt",E,E,0,[[["self"],[R[25]]],[R[7]]]],[11,"fmt",E,E,1,[[["self"],[R[25]]],[R[7]]]],[11,"write",E,E,1,[[["self"]],[["usize"],[R[7],["usize"]]]]],[11,"flush",E,E,1,[[["self"]],[R[7]]]],[11,"read",E,E,1,[[["self"]],[["usize"],[R[7],["usize"]]]]],[11,"from_raw_fd",E,E,1,[[["c_int"]],[R[5]]]],[11,"as_raw_fd",E,E,1,[[["self"]],["c_int"]]],[11,"into_raw_fd",E,E,1,[[],["c_int"]]]],"p":[[3,R[26]],[3,"Socket"],[3,"Domain"],[3,"Type"],[3,R[27]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);